@inherits LayoutComponentBase

<MudThemeProvider 
    @ref="_mudThemeProvider"
    @bind-IsDarkMode="_isDarkMode" 
    Theme="Configuration.Theme" />
<MudSnackbarProvider />


<AuthorizeView>

    <Authorized>
        <MudLayout>

            <MudAppBar>
                <MudIconButton 
                    Icon="@Icons.Material.Filled.Menu"
                    Color="Color.Inherit"
                    Edge="Edge.Start"
                    OnClick="() => ToggleDrawer()"/>
                Dima
                <MudSpacer />

                <MudText Typo="Typo.caption">
                    @context.User.Identity?.Name
                </MudText>

                <MudSwitch 
                    Color="Color.Inherit"
                    Class="ma-4"
                    T="bool"
                    ThumbIcon="@Icons.TwoTone.Lightbulb"
                    @bind-Value="@_isDarkMode" 
                />
            </MudAppBar>

            <MudDrawer 
                @bind-Open="@_isDrawerOpened">
                <NavMenu />
            </MudDrawer>

            <MudMainContent>
                <MudContainer>
                    @Body
                </MudContainer>
            </MudMainContent>

        </MudLayout>
    </Authorized>

    <NotAuthorized>
        <LoginRedirect/>
    </NotAuthorized>

</AuthorizeView>




@code {
    private bool _isDarkMode = true;
    private bool _isDrawerOpened = true;
    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ToggleDrawer() => _isDrawerOpened = !_isDrawerOpened;
}